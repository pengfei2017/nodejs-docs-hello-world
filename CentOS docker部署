# 安装docker 参考地址：https://docs.docker.com/engine/installation/linux/docker-ce/centos/#install-using-the-repository
sudo yum install -y yum-utils device-mapper-persistent-data lvm2

sudo yum-config-manager \
    --add-repo \
    https://download.docker.com/linux/centos/docker-ce.repo
    
sudo yum-config-manager --enable docker-ce-edge

sudo yum makecache fast

sudo yum install docker-ce

# 安装特定版本
列出所有可用版本
yum list docker-ce.x86_64  --showduplicates | sort -r
指定版本号进行安装
sudo yum install docker-ce-<VERSION>

# 启动Docker
sudo systemctl start docker

# 在JenkinsServer上用下面的Dockerfile文件构建jenkins镜像
Dockerfile文件内容如下
FROM jenkinsci/blueocean:latest
USER root
ADD https://get.docker.com/builds/Linux/x86_64/docker-17.05.0-ce.tgz .
RUN mv docker/docker /usr/bin/ && rm -rf docker
USER $USER

编译images
sudo docker build -t reg.chuangjiangx.com/jenkins:lateat .

#启动Jenkins服务器
docker run -d -p 80:8080 -p 50000:50000 -v /var/run/docker.sock:/var/run/docker.sock -v /jenkins_home:/var/jenkins_home reg.chuangjiangx.com/jenkins:lateat
docker logs <容器名或者容器ID> 查看登录Jenkins的初始密码

# 在DockerManager1服务器上安装java
访问 Oracle JDK download page, 查看 RPM version.
复制 jdk-8u102-linux-x64.rpm 的下载地址并用下面的 wget 下载它
wget --header "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-x64.rpm
用yum localinstall安装
sudo yum localinstall jdk-8u141-linux-x64.rpm
删除下载的安装包
rm ~/jdk-8u141-linux-x64.rpm -f
现在 JDK 应该被安装在 /usr/java/中
cd /usr/java
ls -lsah
验证是否安装好
java -version
cd ~/
编辑 .bash_profile文件， append the export JAVA_HOME at the end of the file, for example :
vim .bash_profile

export JAVA_HOME=/usr/java/jdk1.8.0_141/
export JRE_HOME=/usr/java/jdk1.8.0_141/jre

PATH=$PATH:$HOME/bin:$JAVA_HOME/bin

测试环境变量是否设置好
source .bash_profile
java -version
echo $JRE_HOME
echo $JAVA_HOME
echo $PATH

安装了多个版本的java，可以使用下面命令设置默认的java版本
If the CentOS has multiple JDK installed, you can use the alternatives command to set the default java
sudo alternatives --config java

# 在DockerManager1上执行 docker swarm init，然后在DockerWorker1和DockerWorker2工作主机上执行命令，加入DockerManager1的docker集群

====================================
# 每一个作为工作主机加入到docker集群的主机上需要安装docker
# 每一个作为管理主机加入到docker集群的主机上需要安装docker和java

# 在DockerRegistryServer服务器上配置证书和密码
cd /registry/
#生成本地证书或者把第三方证书拷贝到这里
mkdir certs && cd certs
生成用户和密码
mkdir auth && cd auth
docker run --entrypoint htpasswd registry:2 -Bbn hepengfei hpf20140731 > htpasswd
创建启动registry的启动文件
cd /registry/
vim docker-compose.yml
粘贴以下内容到docker-compose.yml文件
registry:
  restart: always
  image: registry:2
  ports:
    - 443:5000
  environment:
    REGISTRY_HTTP_TLS_CERTIFICATE: /certs/fullchain.pem  
    REGISTRY_HTTP_TLS_KEY: /certs/privkey.pem
    REGISTRY_AUTH: htpasswd
    REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
    REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm
  volumes:
    - /registry/data:/var/lib/registry
    - /registry/certs:/certs
    - /registry/auth:/auth
    
注：上面文件中environment中的/certs/fullchain.pem指的是image: registry:2的容器中的/certs目录，由volumes下面挂载到- /registry/certs:/certs本机的/registry/certs目录

安装docker-compose工具 访问链接地址安装最新版：https://github.com/docker/compose/releases
curl -L https://github.com/docker/compose/releases/download/1.15.0-rc1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
启动registry服务
docker-compose up -d
如果端口被占用，使用netstat -ntlp | grep 80查看哪个进程占用80端口 20874/nginx: master
用ps 20874 查看进程的详细信息
用kill -9 20874杀死进程

查看registry服务是否是UP状态
docker ps -a | grep registry

# 用用户名和密码查看镜像库中有哪些镜像
curl https://hepengfei:hpf20140731@reg.chuangjiangx.com/v2/_catalog

# 编译本地项目maven镜像
#进入原maven内部
docker run -it reg.chuangjiangx.com/maven bash
换成阿里云的镜像站
进入目录
cd /etc/apt/
备份镜像源文件
cp sources.list sources.list.bak
清空源文件
echo '' > sources.list
换成阿里云的镜像源地址
echo 'deb http://mirrors.aliyun.com/debian/ stretch main non-free contrib' > sources.list
安装vim编辑器
apt-get update
apt-get install vim
编辑maven的配置文件，换成阿里云的maven包下载地址，要不然会报找不到一些阿里支付的pom包的错误
cd /usr/share/maven/conf/
vim settings.xml
添加下面两段代码
<mirror>
		<id>nexus-osc</id>
		<mirrorOf>central</mirrorOf>
		<name>Nexus osc</name>
		<url>http://114.55.50.30/nexus/content/groups/public/</url>
    </mirror>
    
    和
<profile>
        <id>jdk-1.4</id>

        <activation>
            <jdk>1.4</jdk>
        </activation>
      	<repositories>
			<repository>
				<id>private nexus</id>
				<url>http://114.55.50.30/nexus/content/groups/public/</url>
				<releases>
				  <enabled>true</enabled>
				</releases>
				<snapshots>
				  <enabled>true</enabled>
				</snapshots>
			</repository>
		</repositories>
		<pluginRepositories>
			<pluginRepository>
				<id>nexus</id>
				<name>local private nexus</name>
				<url>http://114.55.50.30/nexus/content/groups/public/</url>
				<releases>
					<enabled>true</enabled>
				</releases>
				<snapshots>
					<enabled>false</enabled>
				</snapshots>
			</pluginRepository>
		</pluginRepositories>
    </profile>
提交镜像
exit 退出原maven的容器内部
docker ps 查看刚才编辑的容器的容器ID
docker commit <容器名或者容器ID> reg.chuangjiangx.com/maven
把新的maven镜像推到私有镜像服务器
docker push reg.chuangjiangx.com/maven
根据项目中Dockerfile.maven文件构建reg.chuangjiangx.com/agent-backend-maven镜像
docker build -f ./dockerfiles/Dockerfile.maven  -t reg.chuangjiangx.com/agent-backend-maven .
