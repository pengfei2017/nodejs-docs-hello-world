在docker管理主机上执行命令
docker swarm init
export manager_token=$(docker swarm join-token manager -q)
export worker_token=$(docker swarm join-token worker -q)
更新管理员节点的状态使他只做管理任务不接受任何worker任务
docker node update --availability drain <hostname或者id(用docker node ls查看)>

在每台work主机上执行以下命令加入docker 群
docker swarm join --token SWMTKN-1-62xl6zazqmkqjejnoaswlo33tdlcl5tc3e3benkl54ix6exde9-2k4c87rvteh6polca4xo5kyic 192.168.2.100:2377

在管理员主机上查看所有的群内主机
docker node ls

登录Jenkins建立任务
访问Jenkins服务器192.168.2.100:8080

使用Jenkins配置Git和Maven的自动化构建,使用maven镜像
docker run -it --rm --name my-maven-project -v "$PWD":/usr/src/mymaven -w /usr/src/mymaven/ maven:3.2-jdk-7 mvn clean install

在docker集群的管理员主机上执行以下命令发布一个多容器应用
docker stack deploy --compose-file docker-stack.yml java-web-demo

查看发布后的多容器应用已经启动的所有服务
docker stack services java-web-demo


开发环境构建maven镜像，在项目根目录下执行
docker build -f Dockerfile.maven  -t reg.hepengfei.com:5000/mymaven .
推送到私有镜像库
docker login -u hepengfei -p hpf20140731 reg.hepengfei.com:5000
docker push reg.hepengfei.com:5000/mymaven
使用的时候只用执行下面命令即可得到war文件


docker run -it --rm --name my-maven-project -v "$PWD":/usr/src/mymaven -w /usr/src/mymaven/app reg.hepengfei.com:5000/mymaven mvn clean install

向文件末尾追加一条记录
echo '192.168.2.111   reg.hepengfei.com' >> /etc/hosts
用新内容覆盖文件内容
echo '192.168.2.111   reg.hepengfei.com' > /etc/hosts


docker build -f ./registration-database/Dockerfile -t reg.hepengfei.com:5000/registration-database ./registration-database
docker build -f ./registration-webserver/Dockerfile -t reg.hepengfei.com:5000/registration-webserver ./registration-webserver
docker login -u hepengfei -p hpf20140731 reg.hepengfei.com:5000
docker push reg.hepengfei.com:5000/registration-database
docker push reg.hepengfei.com:5000/registration-webserver
docker stack deploy --compose-file docker-stack.yml java-web-demo --with-registry-auth

#查看发布后的java-web-demo应用的每个服务是否有错误
docker stack ps java-web-demo

#修改ubuntu主机名
sudo vim /etc/hostname
sudo vim /etc/hosts
把上面两个文件中对应的主机名修改掉重启系统即可

#管理容器的卷
docker volume
